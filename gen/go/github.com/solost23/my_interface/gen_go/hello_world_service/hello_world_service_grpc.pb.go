// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: hello_world_service/hello_world_service.proto

package hello_world_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWorldServiceClient is the client API for HelloWorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldServiceClient interface {
	// createHelloWorld 增加helloWorld
	CreateHelloWorld(ctx context.Context, in *CreateHelloWorldRequest, opts ...grpc.CallOption) (*CreateHelloWorldResponse, error)
	// deleteHelloWorld 删除helloWorld
	DeleteHelloWorld(ctx context.Context, in *DeleteHelloWorldRequest, opts ...grpc.CallOption) (*DeleteHelloWorldResponse, error)
	// updateHelloWorld 更新helloWorld
	UpdateHelloWorld(ctx context.Context, in *UpdateHelloWorldRequest, opts ...grpc.CallOption) (*UpdateHelloWorldResponse, error)
	// listHelloWorld 查找helloWorld
	ListHelloWorld(ctx context.Context, in *ListHelloWorldRequest, opts ...grpc.CallOption) (*ListHelloWorldResponse, error)
}

type helloWorldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldServiceClient(cc grpc.ClientConnInterface) HelloWorldServiceClient {
	return &helloWorldServiceClient{cc}
}

func (c *helloWorldServiceClient) CreateHelloWorld(ctx context.Context, in *CreateHelloWorldRequest, opts ...grpc.CallOption) (*CreateHelloWorldResponse, error) {
	out := new(CreateHelloWorldResponse)
	err := c.cc.Invoke(ctx, "/my_proto.hello_world_service.HelloWorldService/createHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldServiceClient) DeleteHelloWorld(ctx context.Context, in *DeleteHelloWorldRequest, opts ...grpc.CallOption) (*DeleteHelloWorldResponse, error) {
	out := new(DeleteHelloWorldResponse)
	err := c.cc.Invoke(ctx, "/my_proto.hello_world_service.HelloWorldService/deleteHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldServiceClient) UpdateHelloWorld(ctx context.Context, in *UpdateHelloWorldRequest, opts ...grpc.CallOption) (*UpdateHelloWorldResponse, error) {
	out := new(UpdateHelloWorldResponse)
	err := c.cc.Invoke(ctx, "/my_proto.hello_world_service.HelloWorldService/updateHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldServiceClient) ListHelloWorld(ctx context.Context, in *ListHelloWorldRequest, opts ...grpc.CallOption) (*ListHelloWorldResponse, error) {
	out := new(ListHelloWorldResponse)
	err := c.cc.Invoke(ctx, "/my_proto.hello_world_service.HelloWorldService/listHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloWorldServiceServer is the server API for HelloWorldService service.
// All implementations must embed UnimplementedHelloWorldServiceServer
// for forward compatibility
type HelloWorldServiceServer interface {
	// createHelloWorld 增加helloWorld
	CreateHelloWorld(context.Context, *CreateHelloWorldRequest) (*CreateHelloWorldResponse, error)
	// deleteHelloWorld 删除helloWorld
	DeleteHelloWorld(context.Context, *DeleteHelloWorldRequest) (*DeleteHelloWorldResponse, error)
	// updateHelloWorld 更新helloWorld
	UpdateHelloWorld(context.Context, *UpdateHelloWorldRequest) (*UpdateHelloWorldResponse, error)
	// listHelloWorld 查找helloWorld
	ListHelloWorld(context.Context, *ListHelloWorldRequest) (*ListHelloWorldResponse, error)
	mustEmbedUnimplementedHelloWorldServiceServer()
}

// UnimplementedHelloWorldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServiceServer struct {
}

func (UnimplementedHelloWorldServiceServer) CreateHelloWorld(context.Context, *CreateHelloWorldRequest) (*CreateHelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelloWorld not implemented")
}
func (UnimplementedHelloWorldServiceServer) DeleteHelloWorld(context.Context, *DeleteHelloWorldRequest) (*DeleteHelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelloWorld not implemented")
}
func (UnimplementedHelloWorldServiceServer) UpdateHelloWorld(context.Context, *UpdateHelloWorldRequest) (*UpdateHelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHelloWorld not implemented")
}
func (UnimplementedHelloWorldServiceServer) ListHelloWorld(context.Context, *ListHelloWorldRequest) (*ListHelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHelloWorld not implemented")
}
func (UnimplementedHelloWorldServiceServer) mustEmbedUnimplementedHelloWorldServiceServer() {}

// UnsafeHelloWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServiceServer will
// result in compilation errors.
type UnsafeHelloWorldServiceServer interface {
	mustEmbedUnimplementedHelloWorldServiceServer()
}

func RegisterHelloWorldServiceServer(s grpc.ServiceRegistrar, srv HelloWorldServiceServer) {
	s.RegisterService(&HelloWorldService_ServiceDesc, srv)
}

func _HelloWorldService_CreateHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServiceServer).CreateHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_proto.hello_world_service.HelloWorldService/createHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServiceServer).CreateHelloWorld(ctx, req.(*CreateHelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorldService_DeleteHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServiceServer).DeleteHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_proto.hello_world_service.HelloWorldService/deleteHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServiceServer).DeleteHelloWorld(ctx, req.(*DeleteHelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorldService_UpdateHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServiceServer).UpdateHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_proto.hello_world_service.HelloWorldService/updateHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServiceServer).UpdateHelloWorld(ctx, req.(*UpdateHelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorldService_ListHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServiceServer).ListHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my_proto.hello_world_service.HelloWorldService/listHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServiceServer).ListHelloWorld(ctx, req.(*ListHelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloWorldService_ServiceDesc is the grpc.ServiceDesc for HelloWorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "my_proto.hello_world_service.HelloWorldService",
	HandlerType: (*HelloWorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createHelloWorld",
			Handler:    _HelloWorldService_CreateHelloWorld_Handler,
		},
		{
			MethodName: "deleteHelloWorld",
			Handler:    _HelloWorldService_DeleteHelloWorld_Handler,
		},
		{
			MethodName: "updateHelloWorld",
			Handler:    _HelloWorldService_UpdateHelloWorld_Handler,
		},
		{
			MethodName: "listHelloWorld",
			Handler:    _HelloWorldService_ListHelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello_world_service/hello_world_service.proto",
}
